// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/



  import { SegmentToken, LayerToken, ArtLayerToken, NestedLayerToken, AdjustmentLayerToken, ConditionalLayerToken, InOutToken, IOToken, WalkLayerToken, StartEndToken, NumericValueToken, ConditionToken } from '../tokens';

  import { CrispCmd } from '../../../../cmd/crisp.cmd';
  import { PaintCmd } from '../../../../cmd/paint.cmd';
  import { PaintMultiplyCmd } from '../../../../cmd/paint-multiply.cmd';
  import { PosterizeCmd } from '../../../../cmd/posterize.cmd';
  import { MultiplyCmd } from '../../../../cmd/multiply.cmd';
  import { SplitMultiplyCmd } from '../../../../cmd/split_multiply.cmd';
  import { SplitScreenCmd } from '../../../../cmd/split_screen.cmd';
  import { ScreenCmd } from '../../../../cmd/screen.cmd';

  function assignIfUndefined( object, if_undefined ) {
    if ( object === undefined ) {
      return if_undefined;
    }
    else return object;
  }
  
  function mergeObjects( objects ) {
    let merged = {};
    for ( let this_object of objects ) {
      for ( let this_property in this_object ) {
        let this_value = this_object[this_property];
        merged[this_property] = this_value;
      }
    }  
    return merged;  
  } 

  function mergeArrays( arrays ) {
    let result = [];
    for ( let this_array of arrays ) {
      result = result.concat( this_array );
    }
    return result;
  }

  function assignObject( object, config ) {
    for ( let this_property in config ) {
      let this_value = config[ this_property ];
      object[ this_property ] = this_value;
    }
    return object;
  }

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "segments";
  var peg$c1 = "colorblend";
  var peg$c2 = "colorburn";
  var peg$c3 = "colordodge";
  var peg$c4 = "darken";
  var peg$c5 = "darkercolor";
  var peg$c6 = "difference";
  var peg$c7 = "dissolve";
  var peg$c8 = "divide";
  var peg$c9 = "exclusion";
  var peg$c10 = "hardlight";
  var peg$c11 = "hardmix";
  var peg$c12 = "hue";
  var peg$c13 = "lighten";
  var peg$c14 = "lightercolor";
  var peg$c15 = "linearburn";
  var peg$c16 = "lineardodge";
  var peg$c17 = "linearlight";
  var peg$c18 = "luminosity";
  var peg$c19 = "multiply";
  var peg$c20 = "normal";
  var peg$c21 = "overlay";
  var peg$c22 = "passthrough";
  var peg$c23 = "pinlight";
  var peg$c24 = "saturation";
  var peg$c25 = "screen";
  var peg$c26 = "softlight";
  var peg$c27 = "subtract";
  var peg$c28 = "vividlight";
  var peg$c29 = "inverted";
  var peg$c30 = "opacity";
  var peg$c31 = "%";
  var peg$c32 = "in";
  var peg$c33 = "out";
  var peg$c34 = "gamma";
  var peg$c35 = "black";
  var peg$c36 = "white";
  var peg$c37 = "walk";
  var peg$c38 = "start";
  var peg$c39 = "end";
  var peg$c40 = "steps";
  var peg$c41 = "if";
  var peg$c42 = "nested";
  var peg$c43 = "invert";
  var peg$c44 = "brightness";
  var peg$c45 = "contrast";
  var peg$c46 = "levels";
  var peg$c47 = "-";
  var peg$c48 = "+";
  var peg$c49 = ".";
  var peg$c50 = "!";
  var peg$c51 = "and";
  var peg$c52 = "&&";
  var peg$c53 = "or";
  var peg$c54 = "||";
  var peg$c55 = ">";
  var peg$c56 = ">=";
  var peg$c57 = "<";
  var peg$c58 = "<=";
  var peg$c59 = "min";
  var peg$c60 = "max";
  var peg$c61 = "(";
  var peg$c62 = ")";
  var peg$c63 = "{";
  var peg$c64 = "}";
  var peg$c65 = "crisp";
  var peg$c66 = "paint-normal";
  var peg$c67 = "paint normal";
  var peg$c68 = "paint-multiply";
  var peg$c69 = "paint multiply";
  var peg$c70 = "posterize";
  var peg$c71 = "split-multiply";
  var peg$c72 = "split multiply";
  var peg$c73 = "split-screen";
  var peg$c74 = "split screen";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[:=]/;
  var peg$r2 = /^[ \t\n,]/;
  var peg$r3 = /^[ \t\n%,]/;
  var peg$r4 = /^[ \t\n;]/;
  var peg$r5 = /^[ \t\n]/;

  var peg$e0 = peg$literalExpectation("SEGMENTS", true);
  var peg$e1 = peg$literalExpectation("COLORBLEND", true);
  var peg$e2 = peg$literalExpectation("COLORBURN", true);
  var peg$e3 = peg$literalExpectation("COLORDODGE", true);
  var peg$e4 = peg$literalExpectation("DARKEN", true);
  var peg$e5 = peg$literalExpectation("DARKERCOLOR", true);
  var peg$e6 = peg$literalExpectation("DIFFERENCE", true);
  var peg$e7 = peg$literalExpectation("DISSOLVE", true);
  var peg$e8 = peg$literalExpectation("DIVIDE", true);
  var peg$e9 = peg$literalExpectation("EXCLUSION", true);
  var peg$e10 = peg$literalExpectation("HARDLIGHT", true);
  var peg$e11 = peg$literalExpectation("HARDMIX", true);
  var peg$e12 = peg$literalExpectation("HUE", true);
  var peg$e13 = peg$literalExpectation("LIGHTEN", true);
  var peg$e14 = peg$literalExpectation("LIGHTERCOLOR", true);
  var peg$e15 = peg$literalExpectation("LINEARBURN", true);
  var peg$e16 = peg$literalExpectation("LINEARDODGE", true);
  var peg$e17 = peg$literalExpectation("LINEARLIGHT", true);
  var peg$e18 = peg$literalExpectation("LUMINOSITY", true);
  var peg$e19 = peg$literalExpectation("MULTIPLY", true);
  var peg$e20 = peg$literalExpectation("NORMAL", true);
  var peg$e21 = peg$literalExpectation("OVERLAY", true);
  var peg$e22 = peg$literalExpectation("PASSTHROUGH", true);
  var peg$e23 = peg$literalExpectation("PINLIGHT", true);
  var peg$e24 = peg$literalExpectation("SATURATION", true);
  var peg$e25 = peg$literalExpectation("SCREEN", true);
  var peg$e26 = peg$literalExpectation("SOFTLIGHT", true);
  var peg$e27 = peg$literalExpectation("SUBTRACT", true);
  var peg$e28 = peg$literalExpectation("VIVIDLIGHT", true);
  var peg$e29 = peg$literalExpectation("INVERTED", true);
  var peg$e30 = peg$literalExpectation("OPACITY", true);
  var peg$e31 = peg$literalExpectation("%", false);
  var peg$e32 = peg$literalExpectation("IN", true);
  var peg$e33 = peg$literalExpectation("OUT", true);
  var peg$e34 = peg$literalExpectation("GAMMA", true);
  var peg$e35 = peg$literalExpectation("BLACK", true);
  var peg$e36 = peg$literalExpectation("WHITE", true);
  var peg$e37 = peg$literalExpectation("WALK", true);
  var peg$e38 = peg$literalExpectation("START", true);
  var peg$e39 = peg$literalExpectation("END", true);
  var peg$e40 = peg$literalExpectation("STEPS", true);
  var peg$e41 = peg$literalExpectation("IF", true);
  var peg$e42 = peg$literalExpectation("NESTED", true);
  var peg$e43 = peg$literalExpectation("INVERT", true);
  var peg$e44 = peg$literalExpectation("BRIGHTNESS", true);
  var peg$e45 = peg$literalExpectation("CONTRAST", true);
  var peg$e46 = peg$literalExpectation("LEVELS", true);
  var peg$e47 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e48 = peg$literalExpectation("-", false);
  var peg$e49 = peg$literalExpectation("+", false);
  var peg$e50 = peg$literalExpectation(".", false);
  var peg$e51 = peg$classExpectation([":", "="], false, false);
  var peg$e52 = peg$literalExpectation("!", false);
  var peg$e53 = peg$literalExpectation("AND", true);
  var peg$e54 = peg$literalExpectation("&&", false);
  var peg$e55 = peg$literalExpectation("OR", true);
  var peg$e56 = peg$literalExpectation("||", false);
  var peg$e57 = peg$literalExpectation(">", false);
  var peg$e58 = peg$literalExpectation(">=", false);
  var peg$e59 = peg$literalExpectation("<", false);
  var peg$e60 = peg$literalExpectation("<=", false);
  var peg$e61 = peg$literalExpectation("MIN", true);
  var peg$e62 = peg$literalExpectation("MAX", true);
  var peg$e63 = peg$classExpectation([" ", "\t", "\n", ","], false, false);
  var peg$e64 = peg$classExpectation([" ", "\t", "\n", "%", ","], false, false);
  var peg$e65 = peg$classExpectation([" ", "\t", "\n", ";"], false, false);
  var peg$e66 = peg$literalExpectation("(", false);
  var peg$e67 = peg$literalExpectation(")", false);
  var peg$e68 = peg$literalExpectation("{", false);
  var peg$e69 = peg$literalExpectation("}", false);
  var peg$e70 = peg$classExpectation([" ", "\t", "\n"], false, false);
  var peg$e71 = peg$literalExpectation("CRISP", true);
  var peg$e72 = peg$literalExpectation("PAINT-NORMAL", true);
  var peg$e73 = peg$literalExpectation("PAINT NORMAL", true);
  var peg$e74 = peg$literalExpectation("PAINT-MULTIPLY", true);
  var peg$e75 = peg$literalExpectation("PAINT MULTIPLY", true);
  var peg$e76 = peg$literalExpectation("POSTERIZE", true);
  var peg$e77 = peg$literalExpectation("SPLIT-MULTIPLY", true);
  var peg$e78 = peg$literalExpectation("SPLIT MULTIPLY", true);
  var peg$e79 = peg$literalExpectation("SPLIT-SCREEN", true);
  var peg$e80 = peg$literalExpectation("SPLIT SCREEN", true);

  var peg$f0 = function(number_of_segments, layers) {
    let segments = new SegmentToken;
    segments.set_number_of_segments( number_of_segments );
    segments.layers = layers;
    return segments;
  };
  var peg$f1 = function(number_of_segments) { 
    return number_of_segments;
  };
  var peg$f2 = function(layer) {
    return layer;
  };
  var peg$f3 = function(blend_style, layer_configurations, should_merge) { 
    let token = undefined;
    let art_layer_token = new ArtLayerToken();
    if ( layer_configurations ) {
      let token = mergeArrays( layer_configurations );
      token = mergeObjects( token );
      assignObject( art_layer_token, token );
    }
    art_layer_token.blendMode = blend_style.blendMode;
    if ( blend_style.invert !== undefined ) {
      art_layer_token.invert = true;
    }
    if ( should_merge ) {
      art_layer_token.merge = true; 
    }
    return art_layer_token;
  };
  var peg$f4 = function(config) {
    return config;
  };
  var peg$f5 = function(layers) {
    let token = { "layers": layers };
    return token;
  };
  var peg$f6 = function(lhs) { 
      return { "opacity": lhs }; 
    };
  var peg$f7 = function(invert, blend_mode) {
    let token = { "blendMode": blend_mode.toUpperCase() };
    if ( invert ) {
      token.invert = true;
    }
    return token;
  };
  var peg$f8 = function(opacity) { return opacity; };
  var peg$f9 = function(opacity) { return opacity; };
  var peg$f10 = function(configs) {
    let in_config = new IOToken();
    for ( let this_config of configs ) {
      assignObject( in_config, this_config );
    }
    return {"in": in_config};
  };
  var peg$f11 = function(configs) {
    let out_config = new IOToken();
    for ( let this_config of configs ) {
      assignObject( out_config, this_config );
    }
    return { "out": out_config };
  };
  var peg$f12 = function(config) {
    return config;
  };
  var peg$f13 = function(gamma) { 
    return { "gamma": gamma }; 
  };
  var peg$f14 = function(io_value) {
    return { "black": io_value };
  };
  var peg$f15 = function(io_value) {
    return { "white": io_value };
  };
  var peg$f16 = function(lhs) { 
    return new NumericValueToken( lhs, true );
  };
  var peg$f17 = function(lhs) { 
    return new NumericValueToken( lhs, false );
  };
  var peg$f18 = function(blend_style, configs, merge) { 
    if ( blend_style ) {
      configs.push( blend_style );
    }
    let walk_config = mergeObjects( configs );
    let walk_token = new WalkLayerToken;
    assignObject( walk_token, walk_config );
    if ( merge ) {
      walk_token.merge = true; 
    }
    return walk_token;
  };
  var peg$f19 = function(config) {
    return config;
  };
  var peg$f20 = function(start) {
    return start;
  };
  var peg$f21 = function(value) {
    let start = new StartEndToken;
    start.value = value;
    start.absolute = true;
    return {
      "start": start
    }
  };
  var peg$f22 = function(value) { 
    let start = new StartEndToken;
    start.value = value;
    start.absolute = false;
    return {
      "start": start
    }
  };
  var peg$f23 = function(end) {
    return end;
  };
  var peg$f24 = function(value) { 
    let end = new StartEndToken;
    end.value = value;
    end.absolute = true;
    return {
      "end": end
    }
  };
  var peg$f25 = function(value) { 
    let end = new StartEndToken;
    end.value = value;
    end.absolute = false;
    return {
      "end": end
    }
  };
  var peg$f26 = function(rhs) {
    return { "steps": rhs };
  };
  var peg$f27 = function(conditions, layers) {
    let token = new ConditionalLayerToken;
    token.layers = layers;
    token.conditions = conditions;
    return token;
  };
  var peg$f28 = function(condition) {
    return condition;
  };
  var peg$f29 = function(comparison) { 
    let condition = new ConditionToken;
    condition.method = ( min, max ) => { return comparison( min ); };
    return condition;
  };
  var peg$f30 = function(comparison) {
    let condition = new ConditionToken;
    condition.method = ( min, max ) => { return comparison( max ); };
    return condition;
  };
  var peg$f31 = function(rhs) { 
    return (lhs) => { return lhs > rhs; };
  };
  var peg$f32 = function(rhs) { 
    return (lhs) => { return lhs >= rhs; };
  };
  var peg$f33 = function(rhs) {
    return (lhs) => { return lhs < rhs; };
  };
  var peg$f34 = function(rhs) {
    return (lhs) => { return lhs <= rhs; };
  };
  var peg$f35 = function(blend_style, configs, should_merge) {
    let token = new NestedLayerToken;
    if ( should_merge ) {
      token.merge = true;
    }
    token.blendMode = blend_style.blendMode;
    if ( blend_style.invert !== undefined ) {
      token.invert = true;
    }
    token.layers = configs;
    return token;
  };
  var peg$f36 = function(config) {
    return config;
  };
  var peg$f37 = function() { 
    let adjustment_layer = new AdjustmentLayerToken();
    adjustment_layer.name = "Invert";
    adjustment_layer.method = (p) => { 
      ps.addInvertAdjustmentLayer() 
    };
    return adjustment_layer;
  };
  var peg$f38 = function(configs) { 
    let config = mergeObjects( configs );
    let adjustment_layer = new AdjustmentLayerToken();
    adjustment_layer.name = "Brightness/Contrast";
    adjustment_layer.method = (p) => { 
      let brightness = assignIfUndefined( config.brightness, 0 );
      let contrast = assignIfUndefined( config.contrast, 0 );
      ps.addBrightnessContrast( brightness, contrast ) 
    };
    adjustment_layer.config = config;
    return adjustment_layer;
  };
  var peg$f39 = function(config) {
    return config;
  };
  var peg$f40 = function(blend_mode) { 
    return { "blendMode": blend_mode.toUpperCase() }; 
  };
  var peg$f41 = function(brightness) { 
    return { "brightness": brightness };
  };
  var peg$f42 = function(contrast) {
    return { "contrast": contrast };
  };
  var peg$f43 = function(configs) { 
    let config = mergeObjects( configs );
    let adjustment_layer = new AdjustmentLayerToken();
    adjustment_layer.name = "Levels";
    adjustment_layer.method = (p) => { 
      if ( config.in === undefined ) {
        config.in = new IOToken;
      }
      if ( config.in.white === undefined ) {
        config.in.white = new NumericValueToken;
      }
      if ( config.in.black === undefined ) {
        config.in.black = new NumericValueToken;
      }
      if ( config.out === undefined ) {
        config.out = new IOToken;
      }
      if ( config.out.white === undefined ) {
        config.out.white = new NumericValueToken;
      }
      if ( config.out.black === undefined ) {
        config.out.black = new NumericValueToken;
      }
      config.in.black.value = assignIfUndefined( config.in.black.value, 0 );
      config.in.white.value = assignIfUndefined( config.in.white.value, 255 );
      config.out.black.value = assignIfUndefined( config.out.black.value, 0 );
      config.out.white.value = assignIfUndefined( config.out.white.value, 255 );
      config.gamma = assignIfUndefined( config.gamma, 1.0 );
      ps.addLevels( config.in.black.value, config.in.white.value, config.gamma, config.out.black.value, config.out.white.value ) 
    };
    adjustment_layer.config = config;
    return adjustment_layer;
  };
  var peg$f44 = function(config) {
    return config;
  };
  var peg$f45 = function(config) {
    return config;
  };
  var peg$f46 = function(configs) {
    let in_config = new IOToken();
    for ( let this_config of configs ) {
      assignObject( in_config, this_config );
    }
    return {"in": in_config};
  };
  var peg$f47 = function(configs) {
    let out_config = new IOToken();
    for ( let this_config of configs ) {
      assignObject( out_config, this_config );
    }
    return { "out": out_config };
  };
  var peg$f48 = function(digits) { 
  return Number(digits.join("")); 
};
  var peg$f49 = function(rhs) { 
    return -Number(rhs); 
  };
  var peg$f50 = function(rhs) {
    return Number(rhs); 
  };
  var peg$f51 = function(rhs) { return -Number(rhs); };
  var peg$f52 = function(rhs) { return Number(rhs); };
  var peg$f53 = function() { return Number(text()); };
  var peg$f54 = function() {
    this_segment_configuration = peg$parse( CrispCmd );
    return this_segment_configuration;
  };
  var peg$f55 = function() {
    this_segment_configuration = peg$parse( PaintCmd );
    return this_segment_configuration;
  };
  var peg$f56 = function() {
    this_segment_configuration = peg$parse( PaintMultiplyCmd );
    return this_segment_configuration;
  };
  var peg$f57 = function() {
    this_segment_configuration = peg$parse( PosterizeCmd );
    return this_segment_configuration;
  };
  var peg$f58 = function() {
    this_segment_configuration = peg$parse( MultiplyCmd );
    return this_segment_configuration;
  };
  var peg$f59 = function() {
    this_segment_configuration = peg$parse( SplitMultiplyCmd );
    return this_segment_configuration;
  };
  var peg$f60 = function() {
    this_segment_configuration = peg$parse( ScreenCmd );
    return this_segment_configuration;
  };
  var peg$f61 = function() {
    this_segment_configuration = peg$parse( SplitScreenCmd );
    return this_segment_configuration;
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsesegments();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecommands();
    }

    return s0;
  }

  function peg$parsesegments() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsenumber_of_segments();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselayers();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseiteration_delim();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f0(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber_of_segments() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c0) {
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayers() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselayer_declaration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselayer_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselayer_declaration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselayer_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_declaration() {
    var s0;

    s0 = peg$parselayer();
    if (s0 === peg$FAILED) {
      s0 = peg$parseconditional_layer();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenested();
        if (s0 === peg$FAILED) {
          s0 = peg$parseadjustment_layer();
          if (s0 === peg$FAILED) {
            s0 = peg$parsewalk_layer();
          }
        }
      }
    }

    return s0;
  }

  function peg$parselayer() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseblend_style();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselayer_configurations();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parserparen();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemerge();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f3(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselayer_configuration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselayer_configuration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f4(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_configuration() {
    var s0, s1;

    s0 = peg$parselayer_opacity();
    if (s0 === peg$FAILED) {
      s0 = peg$parselayer_in();
      if (s0 === peg$FAILED) {
        s0 = peg$parselayer_out();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselayers();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f5(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parselayer_opacity() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseopacity();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseblend_mode() {
    var s0;

    s0 = input.substr(peg$currPos, 10);
    if (s0.toLowerCase() === peg$c1) {
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 9);
      if (s0.toLowerCase() === peg$c2) {
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.substr(peg$currPos, 10);
        if (s0.toLowerCase() === peg$c3) {
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s0 === peg$FAILED) {
          s0 = input.substr(peg$currPos, 6);
          if (s0.toLowerCase() === peg$c4) {
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.substr(peg$currPos, 11);
            if (s0.toLowerCase() === peg$c5) {
              peg$currPos += 11;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s0 === peg$FAILED) {
              s0 = input.substr(peg$currPos, 10);
              if (s0.toLowerCase() === peg$c6) {
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.substr(peg$currPos, 8);
                if (s0.toLowerCase() === peg$c7) {
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s0 === peg$FAILED) {
                  s0 = input.substr(peg$currPos, 6);
                  if (s0.toLowerCase() === peg$c8) {
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = input.substr(peg$currPos, 9);
                    if (s0.toLowerCase() === peg$c9) {
                      peg$currPos += 9;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e9); }
                    }
                    if (s0 === peg$FAILED) {
                      s0 = input.substr(peg$currPos, 9);
                      if (s0.toLowerCase() === peg$c10) {
                        peg$currPos += 9;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e10); }
                      }
                      if (s0 === peg$FAILED) {
                        s0 = input.substr(peg$currPos, 7);
                        if (s0.toLowerCase() === peg$c11) {
                          peg$currPos += 7;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e11); }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = input.substr(peg$currPos, 3);
                          if (s0.toLowerCase() === peg$c12) {
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e12); }
                          }
                          if (s0 === peg$FAILED) {
                            s0 = input.substr(peg$currPos, 7);
                            if (s0.toLowerCase() === peg$c13) {
                              peg$currPos += 7;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e13); }
                            }
                            if (s0 === peg$FAILED) {
                              s0 = input.substr(peg$currPos, 12);
                              if (s0.toLowerCase() === peg$c14) {
                                peg$currPos += 12;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e14); }
                              }
                              if (s0 === peg$FAILED) {
                                s0 = input.substr(peg$currPos, 10);
                                if (s0.toLowerCase() === peg$c15) {
                                  peg$currPos += 10;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = input.substr(peg$currPos, 11);
                                  if (s0.toLowerCase() === peg$c16) {
                                    peg$currPos += 11;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = input.substr(peg$currPos, 11);
                                    if (s0.toLowerCase() === peg$c17) {
                                      peg$currPos += 11;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = input.substr(peg$currPos, 10);
                                      if (s0.toLowerCase() === peg$c18) {
                                        peg$currPos += 10;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e18); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = input.substr(peg$currPos, 8);
                                        if (s0.toLowerCase() === peg$c19) {
                                          peg$currPos += 8;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = input.substr(peg$currPos, 6);
                                          if (s0.toLowerCase() === peg$c20) {
                                            peg$currPos += 6;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e20); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = input.substr(peg$currPos, 7);
                                            if (s0.toLowerCase() === peg$c21) {
                                              peg$currPos += 7;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e21); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = input.substr(peg$currPos, 11);
                                              if (s0.toLowerCase() === peg$c22) {
                                                peg$currPos += 11;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e22); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = input.substr(peg$currPos, 8);
                                                if (s0.toLowerCase() === peg$c23) {
                                                  peg$currPos += 8;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e23); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = input.substr(peg$currPos, 10);
                                                  if (s0.toLowerCase() === peg$c24) {
                                                    peg$currPos += 10;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = input.substr(peg$currPos, 6);
                                                    if (s0.toLowerCase() === peg$c25) {
                                                      peg$currPos += 6;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$e25); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = input.substr(peg$currPos, 9);
                                                      if (s0.toLowerCase() === peg$c26) {
                                                        peg$currPos += 9;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = input.substr(peg$currPos, 8);
                                                        if (s0.toLowerCase() === peg$c27) {
                                                          peg$currPos += 8;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = input.substr(peg$currPos, 10);
                                                          if (s0.toLowerCase() === peg$c28) {
                                                            peg$currPos += 10;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinversion_pattern() {
    var s0;

    s0 = input.substr(peg$currPos, 8);
    if (s0.toLowerCase() === peg$c29) {
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseblend_style() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseinversion_pattern();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parsews();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseblend_mode();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f7(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopacity() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 7);
    if (s1.toLowerCase() === peg$c30) {
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 37) {
            s4 = peg$c31;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f8(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselayer_in() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c32) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselayer_levels_configurations();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserparen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_out() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c33) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parselparen();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselayer_levels_configurations();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserparen();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_levels_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselayer_levels_configuration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselayer_levels_configuration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_levels_configuration() {
    var s0;

    s0 = peg$parselevels_gamma();
    if (s0 === peg$FAILED) {
      s0 = peg$parselevels_black_white();
    }

    return s0;
  }

  function peg$parselevels_black_white() {
    var s0;

    s0 = peg$parselevels_black();
    if (s0 === peg$FAILED) {
      s0 = peg$parselevels_white();
    }

    return s0;
  }

  function peg$parselevels_gamma() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c34) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsegamma_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegamma_value() {
    var s0;

    s0 = peg$parseunsigned_float();
    if (s0 === peg$FAILED) {
      s0 = peg$parseunsigned_integer();
    }

    return s0;
  }

  function peg$parselevels_black() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c35) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseio_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_white() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c36) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseio_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f15(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseio_value() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseunsigned_integer();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesigned_integer();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f17(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsewalk_layer() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c37) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseblend_style();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsews();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parselparen();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsewalk_configurations();
        if (s6 !== peg$FAILED) {
          s7 = peg$parserparen();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsemerge();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f18(s3, s6, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewalk_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsewalk_configuration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parsewalk_configuration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f19(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewalk_configuration() {
    var s0;

    s0 = peg$parsewalk_start();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewalk_end();
      if (s0 === peg$FAILED) {
        s0 = peg$parsewalk_steps();
        if (s0 === peg$FAILED) {
          s0 = peg$parselayer_configuration();
        }
      }
    }

    return s0;
  }

  function peg$parsewalk_start() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c38) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewalk_start_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewalk_start_value() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseunsigned_integer();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewalk_start_end_value_offset();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f22(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsewalk_start_end_value_offset() {
    var s0;

    s0 = peg$parsesigned_integer();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefloat();
    }

    return s0;
  }

  function peg$parsewalk_end() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c39) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewalk_end_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewalk_end_value() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseunsigned_integer();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewalk_start_end_value_offset();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f25(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsewalk_steps() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c40) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewalk_steps_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewalk_steps_value() {
    var s0;

    s0 = peg$parseunsigned_integer();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesigned_integer();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefloat();
      }
    }

    return s0;
  }

  function peg$parseconditional_layer() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c41) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselayer_conditions();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserparen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parselbracket();
            if (s5 !== peg$FAILED) {
              s6 = peg$parselayers();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserbracket();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27(s3, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_conditions() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselayer_condition();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parseboolean();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselayer_condition();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselayer_condition() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsemin();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomparison_rhs();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemax();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomparison_rhs();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f30(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecomparison_rhs() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsegt();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunsigned_integer();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f31(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegte();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseunsigned_integer();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselt();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseunsigned_integer();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f33(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselte();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseunsigned_integer();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f34(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenested() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c42) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseblend_style();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselparen();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenested_configurations();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserparen();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemerge();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f35(s3, s5, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenested_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselayer_declaration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselayer_declaration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f36(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadjustment_layer() {
    var s0;

    s0 = peg$parseinvert_adjustment_layer();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebrightness_adjustment_layer();
      if (s0 === peg$FAILED) {
        s0 = peg$parselevels_adjustment_layer();
      }
    }

    return s0;
  }

  function peg$parseinvert_adjustment_layer() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c43) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebrightness_adjustment_layer() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 10);
    if (s1.toLowerCase() === peg$c44) {
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebrightness_configurations();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserparen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f38(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebrightness_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsebrightness_configuration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parsebrightness_configuration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebrightness_configuration() {
    var s0, s1;

    s0 = peg$parsebrightness_assignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecontrast_assignment();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseblend_mode();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f40(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parselayer_opacity();
        }
      }
    }

    return s0;
  }

  function peg$parsebrightness_assignment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 10);
    if (s1.toLowerCase() === peg$c44) {
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f41(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontrast_assignment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c45) {
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseassign();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f42(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_adjustment_layer() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c46) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselevels_adjustment_configurations();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserparen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f43(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_adjustment_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselevels_adjustment_configuration();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselevels_adjustment_configuration();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f44(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_adjustment_configuration() {
    var s0;

    s0 = peg$parselevels_adjustment_in();
    if (s0 === peg$FAILED) {
      s0 = peg$parselevels_adjustment_out();
      if (s0 === peg$FAILED) {
        s0 = peg$parselevels_gamma();
      }
    }

    return s0;
  }

  function peg$parselevels_black_white_configurations() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselevels_black_white();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parselist_delim();
      if (s4 !== peg$FAILED) {
        s4 = peg$parselevels_black_white();
        if (s4 === peg$FAILED) {
          peg$currPos = s3;
          s3 = peg$FAILED;
        } else {
          s3 = s4;
        }
      } else {
        s3 = s4;
      }
    }
    if (s2.length < 1) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist_delim();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_adjustment_in() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c32) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselparen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselevels_black_white_configurations();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserparen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f46(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselevels_adjustment_out() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c33) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parselparen();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselevels_black_white_configurations();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserparen();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f47(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunsigned_integer() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r0.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesigned_integer() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c47;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseunsigned_integer();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f49(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseunsigned_integer();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0;

    s0 = peg$parsesigned_integer();
    if (s0 === peg$FAILED) {
      s0 = peg$parseunsigned_integer();
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0;

    s0 = peg$parsesigned_float();
    if (s0 === peg$FAILED) {
      s0 = peg$parseunsigned_float();
    }

    return s0;
  }

  function peg$parsesigned_float() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c47;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsews();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseunsigned_float();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f51(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseunsigned_float();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseunsigned_float() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c49;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r0.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f53();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassign() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseassign_operators();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassign_operators() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parsemerge() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 33) {
      s0 = peg$c50;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0;

    s0 = peg$parseand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseor();
    }

    return s0;
  }

  function peg$parseand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c51) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c53) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.substr(peg$currPos, 2) === peg$c54) {
        s2 = peg$c54;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsegt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 62) {
      s2 = peg$c55;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegte() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c56) {
      s2 = peg$c56;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c57;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselte() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 2) === peg$c58) {
      s2 = peg$c58;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemin() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c59) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemax() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c60) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselist_delim() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r2.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselayer_delim() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r3.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiteration_delim() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r4.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloat_delim() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c49;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parselparen() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c61;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserparen() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 41) {
      s2 = peg$c62;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselbracket() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c63;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserbracket() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 125) {
      s2 = peg$c64;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsews() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r5.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommands() {
    var s0;

    s0 = peg$parsecrisp_cmd();
    if (s0 === peg$FAILED) {
      s0 = peg$parsepaint_normal_cmd();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepaint_multiply_cmd();
        if (s0 === peg$FAILED) {
          s0 = peg$parseposterize_cmd();
          if (s0 === peg$FAILED) {
            s0 = peg$parsemultiply_cmd();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesplit_multiply_cmd();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesplit_screen_cmd();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsescreen_cmd();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecrisp_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 5);
    if (s1.toLowerCase() === peg$c65) {
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepaint_normal_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepaint_normal_cmd_aliases();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepaint_normal_cmd_aliases() {
    var s0;

    s0 = input.substr(peg$currPos, 12);
    if (s0.toLowerCase() === peg$c66) {
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 12);
      if (s0.toLowerCase() === peg$c67) {
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e73); }
      }
    }

    return s0;
  }

  function peg$parsepaint_multiply_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepaint_multiply_cmd_aliases();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f56();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepaint_multiply_cmd_aliases() {
    var s0;

    s0 = input.substr(peg$currPos, 14);
    if (s0.toLowerCase() === peg$c68) {
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 14);
      if (s0.toLowerCase() === peg$c69) {
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
    }

    return s0;
  }

  function peg$parseposterize_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 9);
    if (s1.toLowerCase() === peg$c70) {
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f57();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemultiply_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 8);
    if (s1.toLowerCase() === peg$c19) {
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f58();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesplit_multiply_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesplit_multiply_cmd_aliases();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f59();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesplit_multiply_cmd_aliases() {
    var s0;

    s0 = input.substr(peg$currPos, 14);
    if (s0.toLowerCase() === peg$c71) {
      peg$currPos += 14;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 14);
      if (s0.toLowerCase() === peg$c72) {
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
    }

    return s0;
  }

  function peg$parsescreen_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 6);
    if (s1.toLowerCase() === peg$c25) {
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f60();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesplit_screen_cmd() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsesplit_screen_cmd_aliases();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f61();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesplit_screen_cmd_aliases() {
    var s0;

    s0 = input.substr(peg$currPos, 12);
    if (s0.toLowerCase() === peg$c73) {
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 12);
      if (s0.toLowerCase() === peg$c74) {
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e80); }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
